# ***********************************************************************************************************************
''''

(6 kyu)
1) Sum of Digits / Digital Root (Сумма цифр / цифровой корень)

'''
'''
(6 kyu) 
Sum of Digits / Digital Root (Сумма цифр / цифровой корень)

Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until 
a single-digit number is produced. The input will be a non-negative integer.

Учитывая n, возьмите сумму цифр n. Если это значение имеет более одной цифры, продолжайте уменьшать таким образом, 
пока не будет получено однозначное число. Ввод будет неотрицательным целым числом.

    16  -->  1 + 6 = 7
   942  -->  9 + 4 + 2 = 15  -->  1 + 5 = 6
132189  -->  1 + 3 + 2 + 1 + 8 + 9 = 24  -->  2 + 4 = 6
493193  -->  4 + 9 + 3 + 1 + 9 + 3 = 29  -->  2 + 9 = 11  -->  1 + 1 = 2
'''

################## *** Вариант 1 *** ##################
def digital_root(n):
    l = []
    while n > 0:
        l.append(n % 10)
        n //= 10
    if sum(l) > 9:
        return digital_root(sum(l))
    else:
        return sum(l)

print(digital_root(16))
print(digital_root(942))
print(digital_root(132189))
print(digital_root(493193))


################## *** Вариант 2 *** ##################
def conv(number):
    l = [int(i) for i in str(number)]
    if sum(l) > 9:
        return conv(sum(l))
    return sum(l)


print(conv(493193)) # 2



# ***********************************************************************************************************************
# ***********************************************************************************************************************
# ***********************************************************************************************************************
################## *** Вариант 1 *** ##################
################## *** Вариант 2 *** ##################
